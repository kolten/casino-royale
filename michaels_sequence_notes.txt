Copy of revision 3 cr.idl pasted below
Each sequence spends 5 seconds on that action and handling replies by the other program

Assume bjD ignores invalid sequences
bjD action
shuffling (none)
waiting
dealing
collecting
paying




bjP action
none
joining
exiting
wagering
requesting_a_card



// incorrect notes/assumptions. Based actions off seqno instead of action
/*
bjD sequence (sent by Dealer to Player)
01 shuffling

02 waiting for player joins
	Needs to handle bjP 01 replies

03 waiting for player bet
	Needs to handle bjP 02 replies

04 accepting wager as legitimate

05 do nothing

06 dealing cards
	

07 ask player if new card
	Needs to handle bjP 03 replies

08 send out new cards
	Needs to handle bjP 04 replies

repeat 07 and 08 until all players have replied with bjP sequence 04, then start sequence 01 again.

bjP sequences (sent by Player to Dealer)
01 send join request to dealer
	triggered by bjD 02

02 place bets
	triggered by bjD 03

03 ask for a new card (a hit)
	triggered by bjD 07

04 signal that bjP no longer requires a new card (a stand)
	triggered by bjD 08

Other relevant bjP items
save card information
	triggered by bjD 06
*/







// Rev 3  10/06/2016
module CR
{
   const long MAX_PLAYERS = 6;

   struct card
   {
       char suite;                            // holds a char.  
                                              // 'C'=clubs 'H'=hearts 'D'=diamonds 'S'=spades
       char base_value;                       // 
                                              // '2','3','4','5','6','7','8','9','T',
                                              // 'J','Q','K','A'
       boolean visible;                       // true if anyone other than the dealer can see the card
   };

        
   // this structure is maintained by the dealer, and contains all the information
   // concerning a single player
   struct player_status
   {
       long uuid;                             // unique id for the player
       long wager;                            // amount wagered this hand
       card cards[21];                        // how many is legit ? 
                                              // needs to be the max cards a player could ever have
   };

   enum bjd_action { shuffling, waiting, dealing, collecting, paying}; 
   struct bjDealer
   {
      long uuid;                              // unique Identifier for the dealer
      long seqno;                             // sequence number.  a counter to detect missed messages
      long active_players;                    // number of players in the game
      player_status players[MAX_PLAYERS];     // one for each possible player
      bjd_action action;                      // current action
      card cards[21];                         // dealers cards
      long target_uuid;                       // for actions that are addressed to a specific player, this field
                                              // is set to the uid of that player.  It is set to 0 at all other 
                                              // times
   };
   #pragma keylist bjDealer uuid
   // bjDealer is the data published by the dealer
   
   enum bjp_action { none, joining, exiting, wagering, requesting_a_card };
   struct bjPlayer
   {
      long uuid;                             // unique ID for the player
      long seqno;                            // sequence number.  a counter to detect missed messages
      long credits;                          // total amount of credits 
      long wager;                            // amount wagered this hand
      long dealer_id;                        // the UUID of the dealer
      bjp_action action;                     // the current action being taken
   };
   #pragma keylist bjPlayer uuid
   // bjPlayer is the data published by the player

};
