OpenSplice: Understanding How it Works.
+ IDL produces keyless and keyed topics, which are final java classes.
+ Keyed topics can have multiple instances with different “key” values. (e.g uuid 1 and 2)
+ Keyed topics can be overwritten by topics with the same “key” or uuid for us.
+ Keyless topics cannot have multiple instances and are overwritten every time it is sent.
+ Topics are sent and received to Domain participants of the same name.
+ Topics can only be read/written if they are type-defined by the readers and writers.
+ Topics are sent to all participants of the same name. i.e. “CasinoRoyale Example”
+ Cannot specify who gets the message. Can only psuedo-specify e.g. only read messages with my uuid.

+ Registering types means that that topic type will be known to the Pub/Sub.
+ Registering topics means the key value of that topic-type will be “known” by the API.
+ Registering only needs to happen once for a participant of that topic-type.

+ Generated classes of the IDL do not include long value type
+ IDL classes do not always retain name conventions i.e. MAX_PLAYERS is the class and value is the actual constant.

+ cr.idl produces keyed topics bjPlayer and bjDealer
+ These are the only ones that are read/written for our project.
+ Instantiating topics set values all to 0, or 0 equivalent. i.e. char to ‘\0’.

+ Reading a message cannot read the same message again.
+ Taking a message removes the possibility of any other readers from reading it.
+ Do not take messages, since the participant will handle all tables and games.
+ Topics can be read some time after they are published (at least 5s, from testing)
+ Reading/taking the sequence and not reading the whole sequence will only affect read messages, and the unread messages will still be on the sequence.

+ Writing a message, automatically removes any previous messages of the same key
+ Message sent are participant and type specific, but not program specific. i.e. A dealer cannot specify which player receives which message.

<<Casino Royale Notes>>
+ All player messages should address dealer with uuid.
+ Dealers will specify players with target_uuid.
+ Player will never send a message without specifying, nor can they send unsolicited ones.
+ Collecting and Paying will be player specified too.
+ Dealing will not be player specified, but addressing player actions will.
+ Player will send none or requesting_a_card when beingß addressed during dealing.
+ DealerMain/PlayerMain will handle sending and receiving, as well as the sequence of what is sent.
+ Dealer/Player will handle what is being sent and the data of the dealer.

<<Technical Notes>>
+ Reading requires there to be memory allotted for the message, and happens automatically.
+ Free memory allocation by return_loan function needs to happen every time the sequence is read.2
+ Not freeing memory after sequence is read can cause memory leak.

	OpenSplice is a Open Source Data Distribution Service (DDS), which for our purposes only deals with publishing and subscribing (Pub-sub) events. These events are generated through messages that are sent through OpenSplice so the Dealer and Player will interact with each other. To send these messages, they are registered as participant Publisher and/or Subscribers. Participants are bound to the domain, which in our program is called “Casino Royale Example”. As long as the domain name is the same, all participants registered can read and write in it. But to read/write specific messages requires them to be generated by the IDL as Topics.
	The Interface Description Language (IDL) is run through an IDL Pre Processor (IDLPP) to generate java classes that are based off of the enums, structs, and constants made in the IDL. Interfaces and other helper classes are generated to handle the logistics of reading and writing these “Topics”. However the only topics of your importance are the keyed topics, which can be sent in multiple instances.
	Using the current IDL file provided cr.idl, the generated java files of importance are: interface MAX_PLAYERS, class card, player_status, bjd_action, bjDealer, bjp_action, and bjPlayer. In the IDL, there is a line that says #pragma bjDealer uuid and #pragma bjPlayer uuid. These are the ones that are being sent through the readers and writers since the keyed part means they are registered by their uuid’s. That means you can have multiple instances of bjPlayer and/or bjDealer bound by their uuid, but there can only be one instance of that topic with that particular uuid. For example, a player with uuid 212 might send two message (“Hello” and then “World”) in a row before the dealer could read it. The message that is read by the dealer would be “World”, since that is the newest instance that was written.
	Another trait of OpenSplice is that messages are saved for an long time and can be read for at least 5 seconds (I have tested this). Any Domain Participants created after a message is written cannot read any older messages. 
